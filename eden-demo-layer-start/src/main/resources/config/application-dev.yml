logging:
  level:
    ROOT: INFO
    org.ylzl.eden: DEBUG
    org.ylzl.eden.demo.infrastructure: DEBUG

spring:
  # 内存数据库
  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: false
  # 关系数据库
  datasource:
    # 内存数据源
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:db;DB_CLOSE_ON_EXIT=TRUE
    username: sa
    password: demo
    # 单数据源
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    username:
#    password:
#    url: jdbc:mysql://127.0.0.1:3306/dev?rewriteBatchedStatements=true&useSSL=false&useOldAliasMetadataBehavior=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
    # 多数据源，使用 @DS 切换
#    dynamic:
#      datasource:
#        ds1:
#          username:
#          password:
#          url: jdbc:mysql://localhost:3306/ds1?rewriteBatchedStatements=true&useSSL=false&useOldAliasMetadataBehavior=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
#          type: ${spring.datasource.type}
#          driver-class-name: ${spring.datasource.driver-class-name}
#        ds2:
#          username:
#          password:
#          url: jdbc:mysql://localhost:3306/ds2?rewriteBatchedStatements=true&useSSL=false&useOldAliasMetadataBehavior=true&useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
#          driver-class-name: ${spring.datasource.driver-class-name}
#          type: ${spring.datasource.type}
#      primary: ds1
#      strict: true
  # 分库分表组件
#  shardingsphere:
#    props:
#      sql.show: true
#    datasource:
#      names: demo
#      demo:
#        username: ${spring.datasource.dynamic.datasource.demo.username}
#        password: ${spring.datasource.dynamic.datasource.demo.password}
#        driver-class-name: ${spring.datasource.dynamic.datasource.demo.driver-class-name}
#        jdbc-url: ${spring.datasource.dynamic.datasource.demo.url}
#        type: ${spring.datasource.dynamic.datasource.demo.type}
#    sharding:
#      defaultDataSourceName: demo
  # 缓存数据库
  redis:
    database: 1
    host: localhost
    port: 6379
    password:
    timeout: 5000
  # 模板引擎
  thymeleaf:
    cache: false
  # 消息队列
#  kafka:
#    bootstrap-servers: 10.2.2.35:9092
#    producer:
#      batch-size: 4096
#      buffer-memory: 40960
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#    consumer:
#      session-timeout: 10000 # 会话超时（毫秒）
#      heartbeart-interval: 5000 # 心跳频率（毫秒），配置值不能超过会话超时
#      max-poll-records: 100 # 单次拉取最大记录数
#      fetch-max-wait: 5000 # 拉取消息最大等待时长
#      group-id: ${spring.application.name} # 消费组，消费者多实例的情况下，配置同一个消费组，实例数不能超过 Kafka 的分区数
#      enable-auto-commit: false # 建议关闭自动提交 Offset，不然报错很难处理
#      auto-offset-reset: earliest # 如果 Offset 找不到时重置的规则
#    listener:
#      concurrency: 5 # 消费监听线程数，当配置值大于 Kafka 分区数，按分区数执行
#      poll-timeout: 5000 # 单次拉取消息的超时（毫秒）
#      ack-mode: MANUAL_IMMEDIATE # 手动提交模式

#rocketmq:
#  name-server: 10.2.2.45:9876;10.2.2.48:9876
#  producer:
#    group: ${spring.application.name}
##      access-key:
##      secret-key:
#  consumer:
#    group: ${spring.application.name}
#    topic: demo

# 分布式调度平台
#xxl:
#  job:
#    enable: false
#    access-token:
#    admin:
#      addresses: http://localhost:8090/xxljob
#    executor:
#      app-name: demo-job
#      port: 9999
#      log-path: /data/applogs/xxl-job/jobhandler/
#      log-retention-days: 7
